// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  firstName     String
  lastName      String
  email         String     @unique
  passwordHash  String
  phone         String?
  profileImage  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  items         Item[]     // Items listed by the user
  bookings      Booking[]  // Bookings made by the user
  reviews       Review[]   // Reviews written by the user
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  icon        String?
  items       Item[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Item {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  priceUnit   String     // "hour", "day", "week"
  location    String
  available   Boolean     @default(true)
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  images      ItemImage[]
  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ItemImage {
  id        String   @id @default(uuid())
  url       String
  isPrimary Boolean  @default(false)
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String   @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    String   // "pending", "confirmed", "cancelled", "completed"
  totalPrice Float
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1-5
  comment   String?
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
